Internal working of try-catch Block
    # Java Virtual Machine starts executing the code inside the try block.
    # If an exception occurs, the remaining code in the try block is skipped,
      and the JVM starts looking for the matching catch block.
    # If a matching catch block is found, the code in that block is executed.
    # After the catch block, control moves to the finally block (if present).
    # If no matching catch block is found the exception is passed to the JVM default exception handler.
    # The final block is executed after the try catch block. regardless of whether an exception occurs or not.

Key Points to Remember

| Point | Description                                                                                           |
| ----- | ----------------------------------------------------------------------------------------------------- |
| ðŸ”¹    | `throw` is used to **explicitly throw** a single exception object.                                    |
| ðŸ”¹    | Can throw both **checked** and **unchecked** exceptions.                                              |
| ðŸ”¹    | Must throw an **object of Throwable class** or subclass (`Exception` or `Error`).                     |
| ðŸ”¹    | If you throw a **checked exception**, you must declare it using **`throws`** in the method signature. |
| ðŸ”¹    | Control immediately transfers to the **nearest catch block** or the **JVM** if not caught.            |
