Internal working of try-catch Block
    # Java Virtual Machine starts executing the code inside the try block.
    # If an exception occurs, the remaining code in the try block is skipped,
      and the JVM starts looking for the matching catch block.
    # If a matching catch block is found, the code in that block is executed.
    # After the catch block, control moves to the finally block (if present).
    # If no matching catch block is found the exception is passed to the JVM default exception handler.
    # The final block is executed after the try catch block. regardless of whether an exception occurs or not.

Key Points to Remember

| Point | Description                                                                                           |
| ----- | ----------------------------------------------------------------------------------------------------- |
| üîπ    | `throw` is used to **explicitly throw** a single exception object.                                    |
| üîπ    | Can throw both **checked** and **unchecked** exceptions.                                              |
| üîπ    | Must throw an **object of Throwable class** or subclass (`Exception` or `Error`).                     |
| üîπ    | If you throw a **checked exception**, you must declare it using **`throws`** in the method signature. |
| üîπ    | Control immediately transfers to the **nearest catch block** or the **JVM** if not caught.            |


Important Rules for throws

| Rule | Explanation                                                                                 |
| ---- | ------------------------------------------------------------------------------------------- |
| 1Ô∏è‚É£  | Only used for **checked exceptions** (compiler-checked).                                    |
| 2Ô∏è‚É£  | Can declare **multiple exceptions**, separated by commas.                                   |
| 3Ô∏è‚É£  | Must appear **after the method parameters** and before the method body.                     |
| 4Ô∏è‚É£  | Used only in **method declarations**, not inside the body.                                  |
| 5Ô∏è‚É£  | If a method declares `throws`, the **caller must handle** (try-catch or propagate further). |
| 6Ô∏è‚É£  | For unchecked exceptions, using `throws` is **optional**.                                   |


‚úÖ 8Ô∏è‚É£ throw vs throws (Interview Favorite)

| Feature                  | **throw**                                  | **throws**                       |
| ------------------------ | ------------------------------------------ | -------------------------------- |
| **Purpose**              | To *throw* an exception explicitly         | To *declare* exceptions          |
| **Used In**              | Inside a method or block                   | In method signature              |
| **Number of Exceptions** | Only one at a time                         | Multiple (comma-separated)       |
| **Followed By**          | Exception object                           | Exception class name(s)          |
| **Example**              | `throw new IOException("File not found");` | `void read() throws IOException` |
